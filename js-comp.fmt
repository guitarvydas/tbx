Main [kcomp NameDef @InputPort karrow @OutputPort @Implementation] = [[function ${fmt.capitalize (NameDef)} () {${Implementation}\n}]]

Implementation [lb x rb] = [[${x}]]

LeafImplementation [kleaf lb Handler rb] = [[
this.getOutputMap = function () {
  let map = {};
  this.outputqueue.forEach (output => {
    map [output.port] = output.data;
  });
  return map;
}
${Handler}]]

ContainerImplementation [kcontainer lb Handler rb] = [[
this.outputqueue.forEach (output => {
    map [output.port] = output.data;
  });
  return map;
}
${Handler}]]

Handler [@PersistentVariable @Transition] = [[\nthis.outputqueue = [];${PersistentVariable}\nthis.handler = function (message) {\nmessage.port = message.port.replace (/ /g, '_');
${Transition}
}]]

PersistentVariable [kpersistent NameRef] = [[\nthis.${NameRef} = undefined;]]

Transition [kon SourcePort kcolon @Code] = [[\nif (message.port === "${SourcePort}") {${Code}\n\}]]

Code_save [ksave karrow NameRef] = [[\nthis.${NameRef} = message.data;]]
Code_temp [TempVariable] = [[${TempVariable}]]
Code_if [IfStatement] = [[${IfStatement}]]
Code_do [kdo verbatim] = [[\n${verbatim}]]
Code_send [ksend Expression karrow SinkPort] = [[\nthis.outputqueue.push (\{port: "${SinkPort}", data: ${Expression}\});]]

TempVariable [ktemp Expression karrow NameDef] = [[\nlet ${NameDef} = ${Expression};]]
IfStatement [kif lp Expression rp lb @Code rb kelse lb2 @Code2 rb2] = [[\n${kif} ${lp}${Expression}${rp}${lb}${Code}\n${rb}${kelse}${lb2}${Code2}\n${rb2}]]

Expression [x] = [[${x}]]

operand [NameRef] = [[${NameRef}]]

Port [lb NameRef rb] = [[${NameRef}]]
InputPort [Port] = [[${Port}]]
OutputPort [Port] = [[${Port}]]
SourcePort [Port] = [[${Port}]]
SinkPort [Port] = [[${Port}]]

name_bracketed [lb @cs rb] = [[${lb}${cs}${rb}]]
name_single [ident] = [[${ident}]]

nameDef [Name] = [[${Name}]]
nameRef [Name] = [[${Name}]]

verbatim [lb @cs rb] = [[${lb}${cs}${rb}]]

ident [ident1 @identrest] = [[${ident1}${identrest}]]

ident1 [c] = [[${c}]]
identrest [c] = [[${c}]]

keyword [kw la_sep] = [[${kw}]]
separator [c] = [[${c}]]